Django和Flask框架的区别：
    Django的一站式解决思路，有模板、路由、表单、认证，基本的数据库管理等等内建功能。
    Falsk则与之相反，Flask只是一个内核，默认依赖于两个外部库：Jinja2模板引擎和Werkzeug WSGI工具集，其他很多功能都是以扩展的形式进行嵌套使用。
    Flask比Django更灵活


Python项目必须包含一个requirements.txt文件，用于记录所有依赖包及其精确的版本号，以便在新环境中进行部署操作
使用命令：pip freeze >requirements.txt(每次添加或者删除包最好也执行此命令对requirements文件进行更新)
安装requirements.txt依赖：pip install -r requirements.txt
Flask程序运行过程
    1、当客户想要获取资源时吗，一般会通过浏览器发起http请求。
    2、此时，web服务器会把来自客户端的所有请求都交给Flask程序实例。
    3、程序实例使用Werkzeug来做路由分发
    4、根据每个URL请求，找到具体的视图函数并进行调用
    5、Flask调用视图函数后，可以返回两种内容：
        （1）字符串内容：将视图函数的返回值作为响应的内容，返回给客户端（浏览器）
        （2）HTML模板内容：获取到数据后，把数据传入HTML模板文件中，模板引擎负责渲染数据，、
        然后返回响应数据给客户端（浏览器）

Jinja2模板引擎
    Jinja2：是Python下一个被广泛应用的模板引擎，是由Python实现的模板语言，他的设计思想来源于Django的模板引擎，是flask的内置语言。
    模板语言：是一种被设计来自动生成文档的简单文本格式，在模板语言中，一般会把一些变量传给模板，替换模板的特定位置上预定义好的占位变量名。
    使用Flask提供的render_template函数封装了该模板引擎

过滤器的使用：
    过滤器的使用方式：变量名|过滤器
        {{variable|filtername(*args)}}  注：如果没有任何参数传给过滤器，则可以把括号省略{{variable|filtername}}
    在Jinja2中，过滤器是可以支持链式调用的，示例如下：
        {{"hello world"|reverse|upper}}
    常见的内置过滤器（字符串操作）：
        safe:禁用转义
            {{'<em>hello</em>'|safe}}
        capitalize:把变量的首字母转成大写，其余字母转小写
            {{'hello'|capitalize}}
        lower:把值转成小写
        upper:把值转成大写
        title:把每个单词的首字母变成大写
        reverse:字符串反转
        format:格式化输出
            {{'%s is %d'|format('name',17)}}
        striptags:渲染之前把值中所有的HTML标签都删掉
            {{'<em>hello</em>'|striptags}}
        truncate:字符串截断
            {{"hello every one"|truncate(9)}}
    列表操作
        first:取第一个元素
        {{[1,2,3,4,5]|first}}
        last:去最后一个元素
        {{[1,2,3,4,5]|last}}
        length:获取列表长度
        {{[1,2,3,4,5]|length}}
        sum:列表求和
        sort:列表排序
Python中all()函数的使用：
    all(args)中args是元组或者列表类型，其中元素除了是0、空、None、False外都算True
    注意：空元组、空列表返回值为True
    >>> all(['a', 'b', 'c', 'd'])  # 列表list，元素都不为空或0
    True
    >>> all(['a', 'b', '', 'd'])   # 列表list，存在一个为空的元素
    False
    >>> all([0, 1，2, 3])          # 列表list，存在一个为0的元素
    False
    >>> all(('a', 'b', 'c', 'd'))  # 元组tuple，元素都不为空或0
    True
    >>> all(('a', 'b', '', 'd'))   # 元组tuple，存在一个为空的元素
    False
    >>> all((0, 1, 2, 3))          # 元组tuple，存在一个为0的元素
    False
    >>> all([])             # 空列表
    True
    >>> all(())             # 空元组
    True


Flask连接数据库：
    Flask连接数据库首先添加所需要的包：
        pip install flask-sqlalchemy
        pip install flask-migrate
        pip install flask_script
    数据库连接配置：
        app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:root@127.0.0.1/flask_sql_demo'
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    执行数据库迁移：
        1、首先初始化迁移（此命令只需第一次执行）：python manager.py ddbb init
        2、生成当前版本的迁移文件：python manage.py ddbb migrate -m 'initial'
        3、执行迁移文件：python manage.py ddbb upgrade
    数据库的增删改查：
        添加数据：db.session.add(user)
        添加多个数据：db.session.add_all([user1,user2])
        删除某个用户：db.session.delete(user)
        提交数据库的修改：db.session.commit()
        数据库的回滚操作：db.session.rollback()
    常用的SQLAlchemy查询过滤器
        过滤器                     说明
        filter()                   把过滤器添加到查询上，返回一个新查询,参数：对象.属性==?
        filter_by()                把等值过滤器添加到原查询上，返回一个新查询，参数：属性=?
        limit                      使用指定的值限定查询返回的结果
        offset()                   偏移原查询返回的结果，返回一个新查询
        order_by()                 根据指定条件对原查询结果进行排序，返回一个新查询
        group_by()                 根据指定条件对原查询结果进行分组，返回一个新查询

    常用的SQLAlchemy查询执行器
        方法                       说明
        all()                      以列表的形式返回所有的结果
        first()                    返回查询的第一个结果，如果未查到，返回None
        get()                      返回指定主键对应的行，如不存在，返回None
        count()                    返回查询结果的数量
        paginate()                 返回一个Paginate对象，它包含指定范围内的结果
    如查询所有用户数据：User.query.all()

Flask怎样引用静态文件
    {{ url_for('static',filename='路径')}}


导入文件时可以给导入的名字取个别名，如：from .main import main as main_blueprint

蓝图BluePrint：可以将不同功能的module分开。可以让应用模块化，针对大型应用。

{% if a==b %}content{% else %}content{% endif %}

执行数据库迁移时：
    第一次执行：python app.py db init (此条命令只需第一次执行)
    执行第二条命令生成迁移文件：python app.py db migrate
    执行第三条命令执行迁移文件：python app.py db upgrade


python字符串支持字符串间任意拼接
    1、可以将某个字符串重复好几次出现，在后面乘以重复次数就可以
    2、可以精确拼接某个部分
    3、可以拼接自己的一部分

报错： Warning: (1366, "Incorrect string value: '\\xD6\\xD0\\xB9\\xFA\\xB1\\xEA...' for column 'VARIABLE_VALUE' at row 1")
        result = self._query(query)
解决：pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple  mysql-connector-python
DRIVER = 'pymysql'  -->  DRIVER = 'mysqlconnector'
没报错：没报错没有任何提示信息，程序流程能顺利执行，但是就是不能将数据插入到数据库中，可能经过层层排查，发现字段长度定义
过短导致不能正常插入数据。

加快pip下载速度：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy